data("USPersonalExpenditure")
is.data.frame("USPersonalExpenditure")
uspe <- data.frame("USPersonalExpenditure")
uspe <- data.frame(USPersonalExpenditure)
uspe <- data.frame("USPersonalExpenditure")
uspe
View(uspe)
View(uspe)
View(uspe)
colnames("USPersonalExpenditure")
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
View(uspe)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure$category <- rownames(USPersonalExpenditure)
uspe <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(uspe)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(uspe)
# Add a column "category" to your data frame that contains the rownames
uspe$category <- rownames(uspe)
view(uspe)
View(uspe)
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(uspe)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(uspe)
# Add a column "category" to your data frame that contains the rownames
uspe$category <- rownames(uspe)
uspe["Personal Care", "X1940"]
uspe["Food and Tobacco", "X1960"]
setwd("~/Desktop/info_201/ch9-data-frames/exercise-4")
grants <- read.csv(gates_money.csv)
grants <- read.csv(data/gates_money.csv)
grants <- read.csv("data/gates_money.csv")
View(grants)
organization <- grants$organization
is.vector(organization)
organization <- grants["organization"]
is.vector(organization)
organization <- grants[organization]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Use the View function to look at the loaded data
View(grants)
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE )
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
